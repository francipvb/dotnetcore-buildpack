#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ]; then
	echo "Need heroku-16 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir $ENV_DIR

echo "Installing the dependencies"
apt_install libunwind8 gettext

echo "Installing dotnet"
install_dotnet $BUILD_DIR 

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
dotnet --info

# Now we need to find a valid web project
PROJECT_COUNT=0
PROJECT_FILES=""

for PROJECT_FILE in $(find $BUILD_DIR -name *.csproj); do
  if valid_project $PROJECT_FILE; then
    PROJECT_FILES="$PROJECT_FILES $PROJECT_FILE"
    PROJECT_COUNT=$(( $PROJECT_COUNT + 1 ))
  fi
done

# Now we need to select the project
if [[ $PROJECT_COUNT = 0 ]]; then
  echo "Error: Can't find a valid project to build."
  exit 1
elif [[ $PROJECT_COUNT > 1 ]]; then
  echo "Error: Multi-project solutions aren't supported yet."
  exit 1
else
  for PFILE in $PROJECT_FILES; do PROJECT_FILE=$PFILE; done
fi

PROJECT_NAME=$(basename ${PROJECT_FILE%.*})

echo "restore ${PROJECT_FILE}"
dotnet restore $PROJECT_FILE --runtime ubuntu.16.04-x64

echo "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release

cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll" --server.urls http://+:\$PORT
EOT